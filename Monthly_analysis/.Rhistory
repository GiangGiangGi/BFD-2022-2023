rownames(df_clean) <- NULL
df <- na.omit(df_clean)
rownames(df) <- NULL
df$Date <- as.Date(df$Date, format = "X%Y.%m.%d")
#Writing the data in an excel file
# First, install and load the openxlsx package
#install.packages("openxlsx")
library(openxlsx)
write.xlsx(df, file = "df.xlsx", sheetName = "Sheet1", rowNames = TRUE, colNames = TRUE)
df_clean <- subset(merged_df, select = -c(Date, Date.1, Date.2, Date.3, Date.4, Date.5))
View(df)
View(df_clean)
View(df)
df_clean[["Date"]] <- rownames(df_clean)
rownames(df_clean) <- NULL
df <- na.omit(df_clean)
rownames(df) <- NULL
df$Date <- as.Date(df$Date, format = "X%Y.%m.%d")
View(df)
#Writing the data in an excel file
# First, install and load the openxlsx package
#install.packages("openxlsx")
library(openxlsx)
write.xlsx(df, file = "df.xlsx", sheetName = "Sheet1", rowNames = TRUE, colNames = TRUE)
#Dataset
library(readxl)
#Create the pdf
library(knitr)
library(markdown)
library(commonmark)
#missing values
library(naniar)
#Visualizations
library(ggplot2)
library(tidyverse)
library(plotly)
library(DiagrammeR)
#Correlation and multicollinearity
library(ellipse)
library(car)
#Inspecting the dataframe
library(inspectdf)
#Time series
library(fpp2)
library(forecast)
library(lmtest)
library(gam)
#Gradient Boosting Model
library(gbm)
library(xgboost)
library(caret)
#Mine
library(ts.extend)
library(tseries)
library(caTools)
set.seed(50)
#Dataset
library(readxl)
#Create the pdf
library(knitr)
library(markdown)
library(commonmark)
#missing values
library(naniar)
#Visualizations
library(ggplot2)
library(tidyverse)
library(plotly)
library(DiagrammeR)
#Correlation and multicollinearity
library(ellipse)
library(car)
#Inspecting the dataframe
library(inspectdf)
#Time series
library(fpp2)
library(forecast)
library(lmtest)
library(gam)
#Gradient Boosting Model
library(gbm)
library(xgboost)
library(caret)
#Mine
library(ts.extend)
library(tseries)
library(caTools)
set.seed(50)
database1 <- read_excel("df.xlsx")
database1 <- subset(database1, select =-c(...1))
#colnames(database1)[c(1)] <- c("GSPC")
#colnames(database1)[c(5)] <- c("Inflation")
#colnames(database1)[c(7)] <- c("Real interest rate")
data<-database1
attach(data)
View(database1)
database1 <- read_excel("df.xlsx")
database1 <- subset(database1, select =-c(...1))
colnames(database1)[c(1)] <- c("GSPC")
colnames(database1)[c(5)] <- c("Inflation")
colnames(database1)[c(7)] <- c("Real interest rate")
data<-database1
attach(data)
View(data)
head(data, n=5)
tail(data, n=5)
summary(data)
str(data)
sapply(data, class)
sapply(data, function(x) round((sum(is.na(x))/length(x))*100,2))
#Visualizing them
gg_miss_var(data)
data2 <- data.frame(data)
data <-replace(data, is.na(data), 0)
#Creating the time series
ts1_GSPC<-ts(GSPC, start = 1990, end=2021, frequency = 1)
ts2_VIX<-ts(VIX, start = 1990, end=2021, frequency = 1)
ts3_GDP<-ts(GDP, start = 1990, end=2021, frequency = 1)
is.ts(ts1_GSPC)
#Returns
#ts1_GSPC_returns<-ts(`GSPC returns`, start = 1990, end=2021, frequency = 1)
#ts2_VIX_returns<-ts(`VIX returns`, start = 1990, end=2021, frequency = 1)
#Applying log transformations to try to stabilize the variance
ts1_GSPC_log<-log(ts1_GSPC)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_log)
ts.plot(ts1_GSPC)
#Applying log transformations
ts2_VIX_log<-log(ts2_VIX)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_log)
ts.plot(ts2_VIX)
#Creating the time series (for montly data)
ts1_GSPC<-ts(GSPC, start = 1990, end=2021, frequency = 12)
ts2_VIX<-ts(VIX, start = 1990, end=2021, frequency = 12)
ts3_GDP<-ts(GDP, start = 1990, end=2021, frequency = 12)
is.ts(ts1_GSPC)
#Creating the time series (for montly data)
ts1_GSPC<-ts(GSPC, start = 1990, end=2021, frequency = 365)
ts2_VIX<-ts(VIX, start = 1990, end=2021, frequency = 365)
ts3_GDP<-ts(GDP, start = 1990, end=2021, frequency = 365)
is.ts(ts1_GSPC)
#Creating the time series (for montly data)
ts1_GSPC<-ts(GSPC, start = 1990, end=2021, frequency = 12)
ts2_VIX<-ts(VIX, start = 1990, end=2021, frequency = 12)
ts3_GDP<-ts(GDP, start = 1990, end=2021, frequency = 12)
is.ts(ts1_GSPC)
#Applying log transformations to try to stabilize the variance
ts1_GSPC_log<-log(ts1_GSPC)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_log)
ts.plot(ts1_GSPC)
#Applying log transformations
ts2_VIX_log<-log(ts2_VIX)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_log)
ts.plot(ts2_VIX)
#Applying diff transformations to eliminate the linear trend
ts1_GSPC_diff<-diff(ts1_GSPC)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_diff)
ts.plot(ts1_GSPC)
#Applying diff transformations
ts2_VIX_diff<-diff(ts2_VIX)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_diff)
ts.plot(ts2_VIX)
#Applying diff transformations to eliminate the linear trend and seasonality
ts1_GSPC_diff_s<-diff(ts1_GSPC, s=2)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_diff_s)
ts.plot(ts1_GSPC_diff)
ts.plot(ts1_GSPC)
#Applying diff seasonality transformations
ts2_VIX_diff_s<-diff(ts2_VIX, lag=12)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_diff_s)
ts.plot(ts2_VIX_diff)
ts.plot(ts2_VIX)
#Exploring the length
length(ts1_GSPC)
length(ts1_GSPC_diff)
length(ts2_VIX)
length(ts2_VIX_diff)
#Estimating white noise for GSPC
arima(ts1_GSPC, order=c(0,0,0))
#Estimating white noise for VIX
arima(ts2_VIX, order=c(0,0,0))
#Applying differentiated model GSPC
model_wn_gspc<-arima(ts1_GSPC_diff, order=c(0,0,0))
int_wn_gspc <- model_wn_gspc$coef
ts.plot(ts1_GSPC)
abline(0,int_wn_gspc)
#Applying differentiated model VIX
model_wn_vix<-arima(ts2_VIX_diff, order=c(0,0,0))
int_wn_vix<- model_wn_vix$coef
ts.plot(ts2_VIX)
abline(0,int_wn_vix)
ts.plot(cbind(ts1_GSPC, ts2_VIX))
#Log returns for both indexes
#plot(cbind(ts1_GSPC_returns, ts2_VIX_returns))
library(ellipse)
# plot correlation ellipses
plotcorr(cor(data))
library(ellipse)
# plot correlation ellipses
ellipse(cor(data))
View(data)
class(data)
View(data)
View(data)
library(ellipse)
# plot correlation ellipses
df_numeric <- select(data, -Date)
plotcorr(cor(df_numeric))
# compute VIFs
library(car)
model <- lm(GSPC~VIX+GNI+population+inflation+interest_rate+GDP)
View(data)
# compute VIFs
library(car)
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP)
View(data)
# compute VIFs
library(car)
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real interest rate+GDP)
View(data)
data[5]
data[7]
# compute VIFs
library(car)
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP)
View(data)
# compute VIFs
library(car)
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- VIF(model)
#Dataset
library(car)
library(readxl)
#Create the pdf
library(knitr)
library(markdown)
library(commonmark)
#missing values
library(naniar)
#Visualizations
library(ggplot2)
library(tidyverse)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- VIF(model)
install.packages("car")
installed.packages()
utils::function.search("VIF")
car::VIF(model)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- VIF(model)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+GNI+Population+Inflation+Real_interest_rate+GDP)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+GNI+Population+Inflation+Real_interest_rate+GDP, data=data)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(GNI~GSPC+VIX+Population+Inflation+Real_interest_rate+GDP, data = data)
GNI_vs_all <- vif(model)
cat('GNI:', GNI_vs_all,'   ')
model <- lm(population~GSPC+VIX+GNI+Inflation+Real_interest_rate+GDP, data = data)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+GNI+Population+Inflation+Real_interest_rate+GDP, data=data)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(GNI~GSPC+VIX+Population+Inflation+Real_interest_rate+GDP, data = data)
GNI_vs_all <- vif(model)
cat('GNI:', GNI_vs_all,'   ')
model <- lm(Population~GSPC+VIX+GNI+Inflation+Real_interest_rate+GDP, data = data)
population_vs_all <- vif(model)
cat('population:', population_vs_all,'   ')
model <- lm(inflation~GSPC+VIX+GNI+Population+Real_interest_rate+GDP, data = data)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+GNI+Population+Inflation+Real_interest_rate+GDP, data=data)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(GNI~GSPC+VIX+Population+Inflation+Real_interest_rate+GDP, data = data)
GNI_vs_all <- vif(model)
cat('GNI:', GNI_vs_all,'   ')
model <- lm(Population~GSPC+VIX+GNI+Inflation+Real_interest_rate+GDP, data = data)
population_vs_all <- vif(model)
cat('population:', population_vs_all,'   ')
model <- lm(Inflation~GSPC+VIX+GNI+Population+Real_interest_rate+GDP, data = data)
inflation_vs_all <- vif(model)
cat('inflation:', inflation_vs_all,'   ')
model <- lm(interest_rate~GSPC+VIX+GNI+Population+Inflation+GDP, data = data)
# compute VIFs
#I rename the column of Real interest rate
colnames(data)[colnames(data) == "Real interest rate"] <- "Real_interest_rate"
model <- lm(GSPC~VIX+GNI+Population+Inflation+Real_interest_rate+GDP, data = data)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+GNI+Population+Inflation+Real_interest_rate+GDP, data=data)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(GNI~GSPC+VIX+Population+Inflation+Real_interest_rate+GDP, data = data)
GNI_vs_all <- vif(model)
cat('GNI:', GNI_vs_all,'   ')
model <- lm(Population~GSPC+VIX+GNI+Inflation+Real_interest_rate+GDP, data = data)
population_vs_all <- vif(model)
cat('population:', population_vs_all,'   ')
model <- lm(Inflation~GSPC+VIX+GNI+Population+Real_interest_rate+GDP, data = data)
inflation_vs_all <- vif(model)
cat('inflation:', inflation_vs_all,'   ')
model <- lm(Real_interest_rate~GSPC+VIX+GNI+Population+Inflation+GDP, data = data)
interest_rate_vs_all <- vif(model)
cat('interest_rate:', interest_rate_vs_all,'   ')
model <- lm(GDP~GSPC+VIX+GNI+Population+Inflation+Real_interest_rate, data = data)
GPD_vs_all <- vif(model)
cat('GDP:', GPD_vs_all)
model <- lm(GSPC~VIX+inflation+interest_rate)
model <- lm(GSPC~VIX+Inflation+Real_interest_rate)
model <- lm(GSPC~VIX+Inflation+Real_interest_rate, data = data)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+Inflation+Real_interest_rate, data = data)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(Inflation~GSPC+VIX+Real_interest_rate, data = data)
inflation_vs_all <- vif(model)
cat('inflation:', inflation_vs_all,'   ')
model <- lm(Real_interest_rate~GSPC+VIX+Inflation, data = data)
interest_rate_vs_all <- vif(model)
cat('interest_rate:', interest_rate_vs_all,'   ')
ts.plot(data$Inflation)
AR_inflation <- arima(data$Inflation, order = c(1,0,0))
AR_inflation_fitted<- data$Inflation - residuals(AR_inflation)
points(AR_inflation_fitted, type='l', col="red", lty=2)
predict(AR_inflation, n.ahead=6)$pred
predict(AR_inflation, n.ahead=6)$se
ts.plot(data$Inflation)
MA_inflation <- arima(data$Inflation, order = c(0,0,1))
MA_inflation_fitted<- data$Inflation - residuals(MA_inflation)
points(MA_inflation_fitted, type='l', col="red", lty=2)
predict(MA_inflation, n.ahead=6)$pred
predict(MA_inflation, n.ahead=6)$se
cor(AR_inflation_fitted, MA_inflation_fitted)
AIC(AR_inflation)
BIC(AR_inflation)
AIC(MA_inflation)
BIC(MA_inflation)
arima11<- Arima(GSPC, order=c(1,0,1))
arima11<- Arima(GSPC, order=c(1,1,1))
fitted(arima11)
resid1<- residuals(arima11)
tsdisplay(resid1)
plot(GSPC, type='l')
lines(fitted(arima11), col=2)
for1<- forecast(arima11)
plot(for1)
plot(GSPC, ylab="GSPC index",xlab="year")
tsdisplay(GSPC)
diff1<- diff(GSPC)
tsdisplay(diff1)
####we fit the first Arima model
a1<- Arima(GSPC, order=c(1,0,1), seasonal=c(0,0,1))
plot(GSPC, ylab="GSPC index",xlab="year")
tsdisplay(GSPC)
diff1<- diff(GSPC)
tsdisplay(diff1)
####we fit the first Arima model
a1<- Arima(GSPC, order=c(1,1,1), seasonal=c(0,0,1))
fit1<- fitted(a1)
plot(GSPC, type = 'l')
lines(fit1, col=2)
f1<- forecast(a1)
plot(f1)
r1<- residuals(a1)
tsdisplay(r1)
auto.a<- auto.arima(GSPC)
auto.a
plot(forecast(auto.a))
auto.a<- auto.arima(GSPC)
auto.a
plot(forecast(auto.a))
plot(forecast(auto.a, h=10))
plot(forecast(auto.a, h=100))
plot(forecast(auto.a, h=200))
plot(forecast(auto.a, h=400))
plot(forecast(auto.a, h=400)) + xlim(c(8000, 9000))
plot(forecast(auto.a, h=400))
plot(forecast(auto.a, h=400), xlim(c(100, 110)))
plot(forecast(auto.a, h=400), xlim = (c(100, 110)))
plot(forecast(auto.a, h=400), xlim = (c(8000, 9000)))
autoplot(ts(data))
df_autoplot <- select(data, -GSPC.Volume)
autoplot(ts(data))
df_autoplot <- select(data, -GSPC.Volume)
autoplot(ts(df_autoplot))
tsdisplay(GSPC)
par(mfrow=c(1,1))
armax1<- Arima(GSPC, xreg=VIX, order=c(1,1,2))
res1<- residuals(armax1)
Acf(res1)
fitted(armax1)
plot(GSPC, type='l')
lines(fitted(armax1), col=2)
armax2<- Arima(GSPC, xreg=VIX, order=c(1,1,1))
res2<- residuals(armax2)
Acf(res2)
fitted(armax2)
plot(GSPC, type='l')
lines(fitted(armax2), col=2)
AIC(armax2)
AIC(arima1)
armax3<- auto.arima(GSPC, xreg=VIX)
res3<- residuals(armax3)
Acf(res3)
fitted(armax3)
plot(GSPC, type='l')
lines(fitted(armax3), col=2)
AIC(armax3)
AIC(armax2)
AIC(arima1)
set.seed(123)
split = sample.split(GSPC, SplitRatio = 2/3)
training_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
m1 <- lm(GSPC~., data=training_set)
summary(m1)
par(mfrow=c(2,2))
plot(m1)
par(mfrow=c(1,1))
m1.graph<-ggplot(data, aes(x=data$GSPC, y=data$Population))+
geom_point() + geom_smooth(method="lm", col="pink") +
labs(title = "GSPC as a function of Population",
x = "GSPC",
y = "Population")
m1.graph
m2 <- lm(data$GSPC~ data$Population +data$GNI, data=training_set)
summary(m2)
par(mfrow=c(2,2))
plot(m2)
par(mfrow=c(1,1))
m3 <- lm(data$GSPC~data$Population, data=training_set)
summary(m3)
par(mfrow=c(2,2))
plot(m3)
par(mfrow=c(1,1))
m4 <- step(m1, direction="both")
summary(m4)
m5 <- lm(data$GSPC~data$Population +data$Year+ data$VIX+ data$GNI+ data$`GSPC returns`, data=training_set)
m5 <- lm(data$GSPC~data$Population +data$Date+ data$VIX+ data$GNI+ data$`GSPC returns`, data=training_set)
m5 <- lm(data$GSPC~data$Population +data$Date+ data$VIX+ data$GNI, data=training_set)
summary(m5)
par(mfrow=c(2,2))
plot(m5)
par(mfrow=c(1,1))
p.lm <- predict(m5, newdata=test_set)
dev.lm <- sum((p.lm-test_set$GSPC)^2)
dev.lm
AIC(m5)
g1 <- gam(GSPC~., data=training_set)
par(mfrow=c(3,5))
plot(g1, se=T, col='pink')
library(caret)
# Partition into training and test data
set.seed(42)
index <- createDataPartition(data$GSPC, p = 0.7, list = FALSE)
train_data <- data[index, ]
test_data  <- data[-index, ]
# Train model with preprocessing & repeated cv
library(xgboost)
xgboost_model <- xgboost(data = as.matrix(train_data[, -1]),
label = as.numeric(train_data$GSPC)-1,
max_depth = 3,
objective = 'reg:squarederror',
nrounds = 10,
verbose = FALSE,
prediction = TRUE)
yhat.boost<-predict(xgboost_model,
as.matrix(test_data[, -1])) %>%
as.tibble() %>%
mutate(prediction = round(value),
label = as.numeric(test_data$GSPC)-1) %>%
count(prediction, label)
