library(commonmark)
#missing values
library(naniar)
#Visualizations
library(ggplot2)
#library(tidyverse)
library(plotly)
library(DiagrammeR)
#Correlation and multicollinearity
library(ellipse)
library(car)
#Inspecting the dataframe
library(inspectdf)
#Time series
library(fpp2)
library(forecast)
library(lmtest)
library(gam)
#Gradient Boosting Model
library(gbm)
library(xgboost)
library(caret)
#Mine
library(ts.extend)
library(tseries)
library(caTools)
set.seed(50)
database1 <- read_excel("database1.xlsx")
data<-database1
attach(data)
head(data, n=5)
tail(data, n=5)
summary(data)
str(data)
sapply(data, class)
print(start(GSPC))
print(end(GSPC))
print(frequency(GSPC))
print(deltat(GSPC))
print(cycle(GSPC))
sapply(data, function(x) round((sum(is.na(x))/length(x))*100,2))
#Visualizing them
gg_miss_var(data)
colnames(data) <- c('Year', "VIX",'VIX returns',  "Inflation",'Population', "Real interest rate", "GDP", "GDP per capita", "GNI",'GSPC returns', "GSPC")
columns <- colnames(data)
data2 <- data.frame(data)
data <-replace(data, is.na(data), 0)
sapply(data, function(x) round((sum(is.na(x))/length(x))*100,2))
gg_miss_var(data)
dim(data)
head(data)
tail(data)
dens_vix <- density(log(data$VIX))
plot_ly(
data = data,
x = ~log(VIX),
type = "histogram",
name = "Histogram") %>%
add_lines(x = dens_vix$x, y = dens_vix$y, yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", #Adds the dual y-axis
side = "right", #Adds the density axis on the right side
rangemode = "tozero")) #Forces both y-axes to start at 0
dens_gspc <- density(log(data$GSPC))
plot_ly(
data = data,
x = ~log(GSPC),
type = "histogram",
name = "Histogram") %>%
add_lines(x = dens_gspc$x, y = dens_gspc$y, yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", #Adds the dual y-axis
side = "right", #Adds the density axis on the right side
rangemode = "tozero")) #Forces both y-axes to start at 0
dens_gdp <- density(log(data$GDP))
plot_ly(
data = data,
x = ~log(GDP),
type = "histogram",
name = "Histogram") %>%
add_lines(x = dens_gdp$x, y = dens_gdp$y, yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", #Adds the dual y-axis
side = "right", #Adds the density axis on the right side
rangemode = "tozero")) #Forces both y-axes to start at 0
data %>%
ggplot() +
aes(x = VIX, y = GSPC) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple')
ggplot(data,
aes(x = VIX,
y = GSPC)) +
geom_point(color= "steelblue") +
geom_smooth(method = "lm",
formula = y ~ poly(x, 2),
color = "purple")
data %>%
ggplot() +
aes(x = `VIX returns`, y = `GSPC returns`) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple', formula = y ~ poly(x, 2))
data %>%
ggplot() +
aes(x = GDP, y = GSPC) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple')
data %>%
ggplot() +
aes(x = VIX, y = GSPC) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple',formula=y ~ poly(x, 2))
data %>%
ggplot() +
aes(x = `VIX returns`, y = `GSPC returns`) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple',formula=y ~ poly(x, 2))
data %>%
ggplot() +
aes(x = VIX, y = GDP) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple')
data %>%
ggplot() +
aes(x = VIX, y = GDP) +
geom_point(color= "steelblue") +
geom_smooth(method = 'lm', color = 'purple', formula=y ~ poly(x, 2))
x <- year
y <- GSPC
data_graph1 <- data.frame(x, y)
#fig <- plot_ly(data_graph1, x = x, y = y, type = 'scatter', mode = 'lines')
fig <- plot_ly(data_graph1, x = x, y = y, type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(title = "Year"),
yaxis = list(title = "GSPC"),
line = list(color = "steelblue", width = 2),
margin = list(l = 40, r = 40, t = 40, b = 40),
legend = list(x = 0, y = 1, bgcolor = "rgba(0,0,0,0)"))
fig
x <- year
y <- `GSPC returns`
data_graph1 <- data.frame(x, y)
fig <- plot_ly(data_graph1, x = x, y = y, type = 'scatter', mode = 'lines')
fig
Acf_GSPC<-ggAcf(GSPC, col='blue')
Acf_GSPC+ ggtitle("GSPC Autocorrelation") + xlab("Lag") + ylab("ACF")
Pacf_GSPC<-ggPacf(GSPC, col='blue')
Pacf_GSPC+ ggtitle("GSPC Partial Autocorrelation") + xlab("Lag") + ylab("PACF")
x <- year
y <- VIX
data_graph2 <- data.frame(x, y)
fig <- plot_ly(data_graph2, x = ~x, y = ~y, type = 'scatter', mode = 'lines')%>%
layout(xaxis = list(title = "Year"),
yaxis = list(title = "VIX"),
line = list(color = "steelblue", width = 2),
margin = list(l = 40, r = 40, t = 40, b = 40),
legend = list(x = 0, y = 1, bgcolor = "rgba(0,0,0,0)"))
fig
x <- year
y <- interest_rate
fig <- plot_ly(data = data, x = ~x, y = ~y, type = 'scatter', mode = 'lines', name = "Interest Rate")%>%
layout(xaxis = list(title = "Year"),
line = list(color = "steelblue", width = 2),
margin = list(l = 40, r = 40, t = 40, b = 40),
legend = list(x = 0, y = 1, bgcolor = "rgba(0,0,0,0)"))
y2 <- inflation
fig <- fig %>% add_trace(data = data, x = ~x, y = ~y2, type = 'scatter', mode = 'lines', name = "Inflation")
fig
x <- year
y <- population
fig <- plot_ly(data = data, x = ~x, y = ~y, type = 'scatter', mode = 'lines')%>%
layout(xaxis = list(title = "Year"),
yaxis = list(title = "Population"),
line = list(color = "steelblue", width = 2),
margin = list(l = 40, r = 40, t = 40, b = 40),
legend = list(x = 0, y = 1, bgcolor = "rgba(0,0,0,0)"))
fig
x <- year
y <- `VIX returns`
data_graph2 <- data.frame(x, y)
fig <- plot_ly(data_graph2, x = ~x, y = ~y, type = 'scatter', mode = 'lines')
fig
Acf_GSPC<-ggAcf(VIX, col='blue')
Acf_GSPC+ ggtitle("Autocorrelation Function VIX") + xlab("Lag") + ylab("ACF")
Pacf_GSPC<-ggAcf(VIX, col='blue')
Pacf_GSPC+ ggtitle("Partial Autocorrelation Function PACF VIX") + xlab("Lag") + ylab("PACF")
x <- year
y <- GDP
data_graph3 <- data.frame(x, y)
fig <- plot_ly(data_graph3, x = ~x, y = ~y, type = 'scatter', mode = 'lines', name = "GDP")%>%
layout(xaxis = list(title = "Year"),
line = list(color = "steelblue", width = 2),
margin = list(l = 40, r = 40, t = 40, b = 40),
legend = list(x = 0, y = 1, bgcolor = "rgba(0,0,0,0)"))
y2 <- GNI
fig <- fig %>% add_trace(data = data, x = ~x, y = ~y2, type = 'scatter', mode = 'lines', name = "GNI")
fig
htmlwidgets::saveWidget(fig, "plot.html", selfcontained = TRUE)
Acf_GSPC<-ggAcf(GDP, col='blue')
Acf_GSPC+ ggtitle("Autocorrelation Function GDP") + xlab("Lag") + ylab("ACF")
Pacf_GSPC<-ggAcf(GDP, col='blue')
Pacf_GSPC+ ggtitle("Partial Autocorrelation Function PACF GDP") + xlab("Lag") + ylab("PACF")
#Creating the time series
ts1_GSPC<-ts(GSPC, start = 1990, end=2021, frequency = 1)
ts2_VIX<-ts(VIX, start = 1990, end=2021, frequency = 1)
ts3_GDP<-ts(GDP, start = 1990, end=2021, frequency = 1)
is.ts(ts1_GSPC)
#Returns
ts1_GSPC_returns<-ts(`GSPC returns`, start = 1990, end=2021, frequency = 1)
ts2_VIX_returns<-ts(`VIX returns`, start = 1990, end=2021, frequency = 1)
#Applying log transformations to try to stabilize the variance
ts1_GSPC_log<-log(ts1_GSPC)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_log)
ts.plot(ts1_GSPC)
#Applying log transformations
ts2_VIX_log<-log(ts2_VIX)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_log)
ts.plot(ts2_VIX)
#Applying diff transformations to eliminate the linear trend
ts1_GSPC_diff<-diff(ts1_GSPC)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_diff)
ts.plot(ts1_GSPC)
#Applying diff transformations
ts2_VIX_diff<-diff(ts2_VIX)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_diff)
ts.plot(ts2_VIX)
#Applying diff transformations to eliminate the linear trend and seasonality
ts1_GSPC_diff_s<-diff(ts1_GSPC, s=2)
par(mfrow=c(1,2))
ts.plot(ts1_GSPC_diff_s)
ts.plot(ts1_GSPC_diff)
ts.plot(ts1_GSPC)
#Applying diff seasonality transformations
ts2_VIX_diff_s<-diff(ts2_VIX, lag=12)
par(mfrow=c(1,2))
ts.plot(ts2_VIX_diff_s)
ts.plot(ts2_VIX_diff)
ts.plot(ts2_VIX)
#Exploring the length
length(ts1_GSPC)
length(ts1_GSPC_diff)
length(ts2_VIX)
length(ts2_VIX_diff)
#Estimating white noise for GSPC
arima(ts1_GSPC, order=c(0,0,0))
#Estimating white noise for VIX
arima(ts2_VIX, order=c(0,0,0))
#Applying differentiated model GSPC
model_wn_gspc<-arima(ts1_GSPC_diff, order=c(0,0,0))
int_wn_gspc <- model_wn_gspc$coef
ts.plot(ts1_GSPC)
abline(0,int_wn_gspc)
#Applying differentiated model VIX
model_wn_vix<-arima(ts2_VIX_diff, order=c(0,0,0))
int_wn_vix<- model_wn_vix$coef
ts.plot(ts2_VIX)
abline(0,int_wn_vix)
ts.plot(cbind(ts1_GSPC, ts2_VIX))
#Log returns for both indexes
plot(cbind(ts1_GSPC_returns, ts2_VIX_returns))
library(ellipse)
# plot correlation ellipses
plotcorr(cor(data))
# compute VIFs
library(car)
model <- lm(GSPC~VIX+GNI+population+inflation+interest_rate+GDP)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+GNI+population+inflation+interest_rate+GDP)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(GNI~GSPC+VIX+population+inflation+interest_rate+GDP)
GNI_vs_all <- vif(model)
cat('GNI:', GNI_vs_all,'   ')
model <- lm(population~GSPC+VIX+GNI+inflation+interest_rate+GDP)
population_vs_all <- vif(model)
cat('population:', population_vs_all,'   ')
model <- lm(inflation~GSPC+VIX+GNI+population+interest_rate+GDP)
inflation_vs_all <- vif(model)
cat('inflation:', inflation_vs_all,'   ')
model <- lm(interest_rate~GSPC+VIX+GNI+population+inflation+GDP)
interest_rate_vs_all <- vif(model)
cat('interest_rate:', interest_rate_vs_all,'   ')
model <- lm(GDP~GSPC+VIX+GNI+population+inflation+interest_rate)
GPD_vs_all <- vif(model)
cat('GDP:', GPD_vs_all)
model <- lm(GSPC~VIX+inflation+interest_rate)
GSPC_vs_all <- vif(model)
cat('GSPC:',GSPC_vs_all,'   ')
model <- lm(VIX~GSPC+inflation+interest_rate)
VIX_vs_all <- vif(model)
cat('VIX:', VIX_vs_all,'   ')
model <- lm(inflation~GSPC+VIX+interest_rate)
inflation_vs_all <- vif(model)
cat('inflation:', inflation_vs_all,'   ')
model <- lm(interest_rate~GSPC+VIX+inflation)
interest_rate_vs_all <- vif(model)
cat('interest_rate:', interest_rate_vs_all,'   ')
ts.plot(data$Inflation)
AR_inflation <- arima(data$Inflation, order = c(1,0,0))
AR_inflation_fitted<- data$Inflation - residuals(AR_inflation)
points(AR_inflation_fitted, type='l', col="red", lty=2)
predict(AR_inflation, n.ahead=6)$pred
predict(AR_inflation, n.ahead=6)$se
ts.plot(data$Inflation)
MA_inflation <- arima(data$Inflation, order = c(0,0,1))
MA_inflation_fitted<- data$Inflation - residuals(MA_inflation)
points(MA_inflation_fitted, type='l', col="red", lty=2)
predict(MA_inflation, n.ahead=6)$pred
predict(MA_inflation, n.ahead=6)$se
cor(AR_inflation_fitted, MA_inflation_fitted)
AIC(AR_inflation)
BIC(AR_inflation)
AIC(MA_inflation)
BIC(MA_inflation)
arima11<- Arima(GSPC, order=c(1,0,1))
arima11<- Arima(GSPC, order=c(1,1,1))
fitted(arima11)
resid1<- residuals(arima11)
tsdisplay(resid1)
plot(GSPC, type='l')
lines(fitted(arima11), col=2)
for1<- forecast(arima11)
plot(for1)
arima11<- Arima(GSPC, order=c(1,0,1))
arima11<- Arima(GSPC, order=c(1,1,1))
fitted(arima11)
resid1<- residuals(arima11)
tsdisplay(resid1)
plot(GSPC, type='l')
lines(fitted(arima11), col=2)
for1<- forecast(arima11)
plot(for1)
plot(GSPC, ylab="GSPC index",xlab="year")
tsdisplay(GSPC)
diff1<- diff(GSPC)
tsdisplay(diff1)
####we fit the first Arima model
a1<- Arima(GSPC, order=c(1,0,1), seasonal=c(0,0,1))
plot(GSPC, ylab="GSPC index",xlab="year")
tsdisplay(GSPC)
diff1<- diff(GSPC)
tsdisplay(diff1)
####we fit the first Arima model
a1<- Arima(GSPC, order=c(1,1,1), seasonal=c(0,0,1))
fit1<- fitted(a1)
plot(GSPC, type = 'l')
lines(fit1, col=2)
f1<- forecast(a1)
plot(f1)
r1<- residuals(a1)
tsdisplay(r1)
auto.a<- auto.arima(GSPC)
auto.a
plot(forecast(auto.a))
autoplot(ts(data))
tsdisplay(GSPC)
par(mfrow=c(1,1))
armax1<- Arima(GSPC, xreg=VIX, order=c(1,1,2))
res1<- residuals(armax1)
Acf(res1)
fitted(armax1)
plot(GSPC, type='l')
lines(fitted(armax1), col=2)
armax2<- Arima(GSPC, xreg=VIX, order=c(1,1,1))
res2<- residuals(armax2)
Acf(res2)
fitted(armax2)
plot(GSPC, type='l')
lines(fitted(armax2), col=2)
AIC(armax2)
AIC(arima1)
armax2<- Arima(GSPC, xreg=VIX, order=c(1,1,1))
res2<- residuals(armax2)
Acf(res2)
fitted(armax2)
plot(GSPC, type='l')
lines(fitted(armax2), col=2)
AIC(armax2)
AIC(a1)
armax2<- Arima(GSPC, xreg=VIX, order=c(1,1,1))
res2<- residuals(armax2)
Acf(res2)
fitted(armax2)
plot(GSPC, type='l')
lines(fitted(armax2), col=2)
AIC(armax2)
AIC(a1)
armax3<- auto.arima(GSPC, xreg=VIX)
res3<- residuals(armax3)
Acf(res3)
fitted(armax3)
plot(GSPC, type='l')
lines(fitted(armax3), col=2)
AIC(armax3)
AIC(armax2)
AIC(arima1)
AIC(armax3)
AIC(armax2)
AIC(a1)
AIC(armax3)
AIC(armax2)
AIC(a1)
set.seed(123)
split = sample.split(GSPC, SplitRatio = 2/3)
training_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
m1 <- lm(GSPC~., data=training_set)
summary(m1)
par(mfrow=c(2,2))
plot(m1)
par(mfrow=c(1,1))
m1.graph<-ggplot(data, aes(x=data$GSPC, y=data$Population))+
geom_point() + geom_smooth(method="lm", col="pink") +
labs(title = "GSPC as a function of Population",
x = "GSPC",
y = "Population")
m1.graph
m2 <- lm(data$GSPC~ data$Population +data$GNI, data=training_set)
summary(m2)
par(mfrow=c(2,2))
plot(m2)
par(mfrow=c(1,1))
m3 <- lm(data$GSPC~data$Population, data=training_set)
summary(m3)
par(mfrow=c(2,2))
plot(m3)
par(mfrow=c(1,1))
m4 <- step(m1, direction="both")
summary(m4)
m5 <- lm(data$GSPC~data$Population +data$Year+ data$VIX+ data$GNI+ data$`GSPC returns`, data=training_set)
summary(m5)
par(mfrow=c(2,2))
plot(m5)
par(mfrow=c(1,1))
p.lm <- predict(m5, newdata=test_set)
dev.lm <- sum((p.lm-test_set$GSPC)^2)
dev.lm
AIC(m5)
g1 <- gam(GSPC~., data=training_set)
par(mfrow=c(3,5))
plot(g1, se=T, col='pink')
library(caret)
# Partition into training and test data
set.seed(42)
index <- createDataPartition(data$GSPC, p = 0.7, list = FALSE)
train_data <- data[index, ]
test_data  <- data[-index, ]
head(test_data)
# Train model with preprocessing & repeated cv
library(xgboost)
xgboost_model <- xgboost(data = as.matrix(train_data[, -1]),
label = as.numeric(train_data$GSPC)-1,
max_depth = 3,
objective = 'reg:squarederror',
nrounds = 10,
verbose = FALSE,
prediction = TRUE)
xgboost_model
yhat.boost<-predict(xgboost_model,
as.matrix(test_data[, -1])) %>%
as.tibble() %>%
mutate(prediction = round(value),
label = as.numeric(test_data$GSPC)-1) %>%
count(prediction, label)
m2 <- lm(data$GSPC~ data$Population +data$GNI, data=training_set)
summary(m2)
par(mfrow=c(2,2))
plot(m2)
par(mfrow=c(1,1))
m3 <- lm(data$GSPC~data$Population, data=training_set)
summary(m3)
par(mfrow=c(2,2))
plot(m3)
par(mfrow=c(1,1))
m4 <- step(m1, direction="both")
summary(m4)
m5 <- lm(data$GSPC~data$Population +data$Year+ data$VIX+ data$GNI+ data$`GSPC returns`, data=training_set)
summary(m5)
par(mfrow=c(2,2))
plot(m5)
par(mfrow=c(1,1))
p.lm <- predict(m5, newdata=test_set)
dev.lm <- sum((p.lm-test_set$GSPC)^2)
dev.lm
AIC(m5)
g1 <- gam(GSPC~., data=training_set)
par(mfrow=c(3,5))
plot(g1, se=T, col='pink')
library(caret)
# Partition into training and test data
set.seed(42)
index <- createDataPartition(data$GSPC, p = 0.7, list = FALSE)
train_data <- data[index, ]
test_data  <- data[-index, ]
head(test_data)
# Train model with preprocessing & repeated cv
library(xgboost)
xgboost_model <- xgboost(data = as.matrix(train_data[, -1]),
label = as.numeric(train_data$GSPC)-1,
max_depth = 3,
objective = 'reg:squarederror',
nrounds = 10,
verbose = FALSE,
prediction = TRUE)
xgboost_model
yhat.boost<-predict(xgboost_model,
as.matrix(test_data[, -1])) %>%
as.tibble() %>%
mutate(prediction = round(value),
label = as.numeric(test_data$GSPC)-1) %>%
count(prediction, label)
